name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies for ecom
      run: |
        cd ecom
        npm ci
    
    - name: Install dependencies for queue
      run: |
        cd queue
        npm ci
    
    - name: Lint code (if ESLint is configured)
      run: |
        cd ecom
        if [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || [ -f package.json ]; then
          if npm list eslint >/dev/null 2>&1; then
            npm run lint || echo "No lint script found"
          fi
        fi
      continue-on-error: true
    
    - name: Run tests for queue service
      run: |
        cd queue
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
        RABBITMQ_URL: amqp://guest:guest@localhost:5672
    
    - name: Start ecom server for health check
      run: |
        cd ecom
        timeout 30s npm start &
        sleep 10
        # Basic health check
        curl -f http://localhost:8080 || echo "Server health check completed"
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/ecom_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        RABBITMQ_URL: amqp://guest:guest@localhost:5672
      continue-on-error: true

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Audit ecom dependencies
      run: |
        cd ecom
        npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Audit queue dependencies
      run: |
        cd queue
        npm audit --audit-level=moderate
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies for ecom
      run: |
        cd ecom
        npm ci --only=production
    
    - name: Install dependencies for queue
      run: |
        cd queue
        npm ci --only=production
    
    - name: Create production build artifacts
      run: |
        mkdir -p dist
        cp -r ecom dist/
        cp -r queue dist/
        # Remove dev dependencies and test files
        rm -rf dist/ecom/node_modules
        rm -rf dist/queue/node_modules
        rm -rf dist/*/src/test
        rm -rf dist/*/.git*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: production-build
        path: dist/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, docker build and push, kubectl apply, etc.
        echo "Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: production-build
        path: dist/
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: rsync, docker build and push, kubectl apply, etc.
        echo "Production deployment completed"